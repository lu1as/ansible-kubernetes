- name: check version (Debian)
  shell: "{% if etcd_arch == 'arm' %}ETCD_UNSUPPORTED_ARCH=arm{% endif %} etcd --version"
  register: etcd_current_version
  failed_when: false
  changed_when: etcd_version not in etcd_current_version.stdout
  check_mode: false

# supported Debian
- block:
  - name: "install ({{etcd_arch}})"
    unarchive:
      src: "https://github.com/coreos/etcd/releases/download/v{{etcd_version}}/etcd-v{{etcd_version}}-linux-{{etcd_arch}}.tar.gz"
      dest: "{{etcd_download_dir}}"
      remote_src: true

  - copy:
      src: "{{etcd_download_dir}}/etcd-v{{etcd_version}}-linux-{{etcd_arch}}/{{item}}"
      dest: "/usr/local/bin/{{item}}"
      remote_src: true
      mode: +x
    loop:
      - etcd
      - etcdctl
    notify: restart etcd
  
  - file:
      path: "{{etcd_download_dir}}/etcd-v{{etcd_version}}-linux-{{etcd_arch}}"
      state: absent

  when: "etcd_arch != 'arm' and
         etcd_current_version.changed"

# install from local binary
- block:
  - shell: echo $GOPATH
    register: gopath
    changed_when: false
    delegate_to: localhost
    become: false

  - name: install from local binary
    copy:
      src: "{{gopath.stdout}}/src/github.com/coreos/etcd/bin/{{item}}"
      dest: "/usr/local/bin/{{item}}"
      mode: +x
    loop:
      - etcd
      - etcdctl
    notify: restart etcd
  
  when: "etcd_arch == 'arm' and
        etcd_current_version.changed"

- name: create etcd user
  user:
    name: etcd
    home: /var/lib/etcd
    create_home: false

- name: create etcd lib
  file:
    path: /var/lib/etcd
    owner: etcd
    group: etcd
    mode: 0700
    state: directory

- name: create service
  template:
    src: service.j2
    dest: /etc/systemd/system/etcd.service
  notify: restart etcd
