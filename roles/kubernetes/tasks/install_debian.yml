# master only
- block:
  - name: check kubernetes-master version
    shell: kube-apiserver --version
    register: kubeserver_current_version
    check_mode: false
    failed_when: false
    changed_when: kube_version not in kubeserver_current_version.stdout
  
  # install master
  - block:
    - name: "download kubernetes-server ({{kube_arch | default(ansible_architecture)}})"
      unarchive:
        src: "https://storage.googleapis.com/kubernetes-release/release/v{{kube_version}}/kubernetes-server-linux-{{kube_arch | default(ansible_architecture)}}.tar.gz"
        dest: "{{kube_download_dir}}"
        remote_src: true
  
    - name: install kubernetes-master
      copy:
        src: "{{kube_download_dir}}/kubernetes/server/bin/{{item}}"
        dest: "/usr/local/bin/{{item}}"
        mode: +x
        remote_src: true
      loop:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
        - kubectl
  
    when: kubeserver_current_version.changed

  # master services
  - name: create kubernetes-master services
    copy:
      src: "{{item}}.service"
      dest: "/etc/systemd/system/{{item}}.service"
    notify:
      - systemd reload
      - "restart {{item}}"
    loop:
      - kube-apiserver
      - kube-controller-manager
      - kube-scheduler

  when: "'kube_masters' in group_names"

# minion only
- block:
  - name: check kubernetes-node version
    shell: kubelet --version
    register: kubenode_current_version
    failed_when: false
    check_mode: false
    changed_when: kube_version not in kubenode_current_version.stdout

  # install minion
  - block:
    - name: "download kubernetes-node ({{kube_arch | default(ansible_architecture)}})"
      unarchive:
        src: "https://storage.googleapis.com/kubernetes-release/release/v{{kube_version}}/kubernetes-node-linux-{{kube_arch | default(ansible_architecture)}}.tar.gz"
        dest: "{{kube_download_dir}}"
        remote_src: true

    - name: install kubernetes-node
      copy:
        src: "{{kube_download_dir}}/kubernetes/node/bin/{{item}}"
        dest: "/usr/local/bin/{{item}}"
        mode: +x
        remote_src: true
      loop:
        - kube-proxy
        - kubelet

    when: kubenode_current_version.changed

  - name: create docker dropin directory
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
  
  - name: patch docker service
    copy:
      src: docker-dropin.conf
      dest: /etc/systemd/system/docker.service.d/30-systemd-cgroup-driver.conf
    notify:
      - restart docker

  - name: create kubelet lib
    file:
      path: /var/lib/kubelet
      state: directory

  # minion services
  - name: create kubernetes-node services
    copy:
      src: "{{item}}.service"
      dest: "/etc/systemd/system/{{item}}.service"
    notify:
      - systemd reload 
      - "restart {{item}}"
    loop:
      - kube-proxy
      - kubelet
    
  when: "'kube_minions' in group_names"

- name: create kube user
  user:
    name: kube
    home: /etc/kubernetes
    create_home: false

- name: cleanup downloads
  file:
    path: "{{kube_download_dir}}/kubernetes"
    state: absent
